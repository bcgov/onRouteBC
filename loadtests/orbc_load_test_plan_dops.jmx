<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">3180</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="Keep-Alive" elementType="Header">
            <stringProp name="Header.name">Keep-Alive</stringProp>
            <stringProp name="Header.value">115</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip,deflate</stringProp>
          </elementProp>
          <elementProp name="Accept-Charset" elementType="Header">
            <stringProp name="Header.name">Accept-Charset</stringProp>
            <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">X-BlazeMeter-Session</stringProp>
            <stringProp name="Header.value">${__P(blazemeter.session_id)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <intProp name="HTTPSampler.concurrentPool">2</intProp>
        <stringProp name="HTTPSampler.embedded_url_re">^((?!google|facebook|youtube|pinterest|twimg|doubleclick).)*$</stringProp>
        <intProp name="HTTPSampler.connect_timeout">60000</intProp>
        <intProp name="HTTPSampler.response_timeout">120000</intProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="FRONTEND_API_URL" elementType="Argument">
            <stringProp name="Argument.name">FRONTEND_API_URL</stringProp>
            <stringProp name="Argument.value">onroutebc-test-frontend.apps.silver.devops.gov.bc.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VEHICLES_API_URL" elementType="Argument">
            <stringProp name="Argument.name">VEHICLES_API_URL</stringProp>
            <stringProp name="Argument.value">onroutebc-test-vehicles.apps.silver.devops.gov.bc.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DOPS_API_URL" elementType="Argument">
            <stringProp name="Argument.name">DOPS_API_URL</stringProp>
            <stringProp name="Argument.value">onroutebc-test-dops.apps.silver.devops.gov.bc.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BEARER_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">BEARER_TOKEN</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER" elementType="Argument">
            <stringProp name="Argument.name">USER</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS" elementType="Argument">
            <stringProp name="Argument.name">USERS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FRONTEND_URL" elementType="Argument">
            <stringProp name="Argument.name">FRONTEND_URL</stringProp>
            <stringProp name="Argument.value">https://onroutebc-test-frontend.apps.silver.devops.gov.bc.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config">
        <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
        <stringProp name="WebDriverConfig.driver_path">C:\Users\brwang\Software\chromedriver-win64\chromedriver-win64-131\chromedriver-win64\chromedriver.exe</stringProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <boolProp name="WebDriverConfig.headless">false</boolProp>
        <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
        <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
        <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
        <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
      </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IDIR ppc create and download pdf - dops">
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,300)}</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,3000)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="login">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.WebElement
import org.openqa.selenium.devtools.DevTools;
import org.openqa.selenium.devtools.v129.network.Network;
import java.util.Optional;
import org.openqa.selenium.logging.LogType
import org.openqa.selenium.logging.LogEntries
import org.openqa.selenium.chrome.ChromeOptions
import org.openqa.selenium.logging.LoggingPreferences
import java.util.logging.Level
import java.util.function.Consumer

WDS.sampleResult.sampleStart() 

WDS.log.info &quot;Groovy version: ${GroovySystem.version}&quot;


def frontendUrl = WDS.vars.get(&quot;FRONTEND_URL&quot;)
WDS.browser.get(frontendUrl)
Thread.sleep(5000)

def loginButton = WDS.browser.findElement(By.id(&apos;login-idir&apos;))
if (loginButton != null) {
    loginButton.click()
    WDS.log.info(&quot;Clicked on the login-bceid button&quot;)
} else {
    WDS.log.info(&quot;Button with id &apos;login-bceid&apos; not found&quot;)
}

Thread.sleep(5000)

/*
try {
    def user = WDS.browser.findElement(By.id(&apos;user&apos;))
    def password = WDS.browser.findElement(By.id(&apos;password&apos;))
    if (user != null) {      
	def userValue = WDS.vars.get(&quot;USER&quot;)
	def passwordValue = WDS.vars.get(&quot;PASSWORD&quot;)
	user.sendKeys(userValue)
	password.sendKeys(passwordValue)
	Thread.sleep(5000)
	
	def submitButton = WDS.browser.findElement(By.name(&apos;btnSubmit&apos;))
	if (submitButton != null) {
	    submitButton.click()
	} else {
	    WDS.log.info(&apos;Submit button with name=&quot;btnSubmit&quot; not found&apos;)
	}
	Thread.sleep(5000)
	}
} catch (NoSuchElementException e) {
	WDS.log.info(&apos;User element not found.&apos;)
}
*/
	

def devTools = ((org.openqa.selenium.chrome.ChromeDriver) WDS.browser).getDevTools()
devTools.createSession()
devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()))
devTools.addListener(Network.requestWillBeSent(), { request -&gt;
    if (request.getRequest().getUrl().contains(&quot;https&quot;)) {
        def headers = request.getRequest().getHeaders()
        def authHeader = headers.get(&quot;Authorization&quot;)
        if (authHeader != null &amp;&amp; authHeader.startsWith(&quot;Bearer &quot;)) {
            def token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;)
            WDS.log.info(&quot;Extracted Token: &quot; + token)
            WDS.vars.put(&quot;BEARER_TOKEN&quot;, token)
        }
    }
    else {
    	WDS.log.info(&quot;bruce test no token: &quot;)
    	}
} as Consumer)
Thread.sleep(5000)

WDS.browser.get(frontendUrl)
Thread.sleep(5000)

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ppcSearch">
          <stringProp name="HTTPSampler.path">https://${VEHICLES_API_URL}/permits?searchColumn=permitNumber&amp;searchString=1&amp;page=1&amp;take=10</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BEARER_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ppcDgenGetDocument">
          <stringProp name="HTTPSampler.path">https://${DOPS_API_URL}/dms/1?download=url&amp;companyId=104</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;reportTemplate&quot;: &quot;PAYMENT_AND_REFUND_DETAILED_REPORT&quot;,&#xd;
  &quot;reportData&quot;: {&#xd;
    &quot;issuedBy&quot;: &quot;Self Issued and PPC&quot;,&#xd;
    &quot;runDate&quot;: &quot;Jul. 17, 2023, 09:00 PM, PDT&quot;,&#xd;
    &quot;permitType&quot;: &quot;All Permit Types&quot;,&#xd;
    &quot;paymentMethod&quot;: &quot;Cash, Cheque, Icepay - Mastercard, Icepay - Mastercard (Debit), Icepay - Visa, Icepay - Visa (Debit), Web - Mastercard (Debit), Web - Visa (Debit), PoS - Mastercard (Debit), PoS - Visa (Debit), PoS - Mastercard&quot;,&#xd;
    &quot;timePeriod&quot;: &quot;Jul. 17, 2023, 09:00 PM, PDT – Jul. 18, 2023, 09:00 PM, PDT&quot;,&#xd;
    &quot;payments&quot;: [&#xd;
      {&#xd;
        &quot;issuedOn&quot;: &quot;Jul. 17, 2023, 09:00 PM, PDT&quot;,&#xd;
        &quot;providerTransactionId&quot;: &quot;73582422238&quot;,&#xd;
        &quot;orbcTransactionId&quot;: &quot;OR-678904512857&quot;,&#xd;
        &quot;paymentMethod&quot;: &quot;Cash&quot;,&#xd;
        &quot;receiptNo&quot;: &quot;45098721098&quot;,&#xd;
        &quot;permitNo&quot;: &quot;P2-72106199-468&quot;,&#xd;
        &quot;permitType&quot;: &quot;STOW&quot;,&#xd;
        &quot;user&quot;: &quot;ANPETRIC&quot;,&#xd;
        &quot;amount&quot;: &quot;$90.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Cash&quot;,&#xd;
        &quot;subTotalAmount&quot;: &quot;$90.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Cash&quot;,&#xd;
        &quot;totalAmount&quot;: &quot;$90.00&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;refunds&quot;: [&#xd;
      {&#xd;
        &quot;issuedOn&quot;: &quot;Jul. 17, 2023, 09:00 PM, PDT&quot;,&#xd;
        &quot;providerTransactionId&quot;: &quot;73582422238&quot;,&#xd;
        &quot;orbcTransactionId&quot;: &quot;OR-678904512857&quot;,&#xd;
        &quot;paymentMethod&quot;: &quot;Cheque&quot;,&#xd;
        &quot;receiptNo&quot;: &quot;51961102630&quot;,&#xd;
        &quot;permitNo&quot;: &quot;P2-15348742-610&quot;,&#xd;
        &quot;permitType&quot;: &quot;TROS&quot;,&#xd;
        &quot;user&quot;: &quot;KOPARKIN&quot;,&#xd;
        &quot;amount&quot;: &quot;$10.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Cheque&quot;,&#xd;
        &quot;subTotalAmount&quot;: &quot;$190.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Credit Card&quot;,&#xd;
        &quot;totalAmount&quot;: &quot;$190.00&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;summaryPayments&quot;: [&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Cheque&quot;,&#xd;
        &quot;payment&quot;: &quot;$190&quot;,&#xd;
        &quot;refund&quot;: &quot;$190&quot;,&#xd;
        &quot;deposit&quot;: &quot;$190&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;subTotalPaymentAmount&quot;: &quot;$190.00&quot;,&#xd;
        &quot;subTotalRefundAmount&quot;: &quot;$190.00&quot;,&#xd;
        &quot;subTotalDepositAmount&quot;: &quot;$190.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;grandTotalAmount&quot;: &quot;$190.00&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;summaryPermits&quot;: [&#xd;
      {&#xd;
        &quot;permitType&quot;: &quot;TROS&quot;,&#xd;
        &quot;permitCount&quot;: &quot;1&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;totalPermits&quot;: &quot;1&quot;&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;generatedDocumentFileName&quot;: &quot;FinancialA12345&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BEARER_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ppcDgenReportRender">
          <stringProp name="HTTPSampler.path">https://${DOPS_API_URL}/dgen/report/render</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;reportTemplate&quot;: &quot;PAYMENT_AND_REFUND_DETAILED_REPORT&quot;,&#xd;
  &quot;reportData&quot;: {&#xd;
    &quot;issuedBy&quot;: &quot;Self Issued and PPC&quot;,&#xd;
    &quot;runDate&quot;: &quot;Jul. 17, 2023, 09:00 PM, PDT&quot;,&#xd;
    &quot;permitType&quot;: &quot;All Permit Types&quot;,&#xd;
    &quot;paymentMethod&quot;: &quot;Cash, Cheque, Icepay - Mastercard, Icepay - Mastercard (Debit), Icepay - Visa, Icepay - Visa (Debit), Web - Mastercard (Debit), Web - Visa (Debit), PoS - Mastercard (Debit), PoS - Visa (Debit), PoS - Mastercard&quot;,&#xd;
    &quot;timePeriod&quot;: &quot;Jul. 17, 2023, 09:00 PM, PDT – Jul. 18, 2023, 09:00 PM, PDT&quot;,&#xd;
    &quot;payments&quot;: [&#xd;
      {&#xd;
        &quot;issuedOn&quot;: &quot;2023-11-11T23:26:51.170Z&quot;,&#xd;
        &quot;providerTransactionId&quot;: &quot;73582422238&quot;,&#xd;
        &quot;orbcTransactionId&quot;: &quot;OR-678904512857&quot;,&#xd;
        &quot;paymentMethod&quot;: &quot;Cash&quot;,&#xd;
        &quot;receiptNo&quot;: &quot;45098721098&quot;,&#xd;
        &quot;permitNo&quot;: &quot;P2-72106199-468&quot;,&#xd;
        &quot;permitType&quot;: &quot;STOS&quot;,&#xd;
        &quot;users&quot;: &quot;ANPETRIC&quot;,&#xd;
        &quot;amount&quot;: &quot;90.00&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;refunds&quot;: [&#xd;
      {&#xd;
        &quot;issuedOn&quot;: &quot;2023-11-11T23:26:51.170Z&quot;,&#xd;
        &quot;providerTransactionId&quot;: &quot;73582422238&quot;,&#xd;
        &quot;orbcTransactionId&quot;: &quot;OR-678904512857&quot;,&#xd;
        &quot;paymentMethod&quot;: &quot;Cheque&quot;,&#xd;
        &quot;receiptNo&quot;: &quot;51961102630&quot;,&#xd;
        &quot;permitNo&quot;: &quot;P2-15348742-610&quot;,&#xd;
        &quot;permitType&quot;: &quot;TROS&quot;,&#xd;
        &quot;users&quot;: &quot;KOPARKIN&quot;,&#xd;
        &quot;amount&quot;: &quot;10.00&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;summaryPaymentsAndRefunds&quot;: [&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Cash&quot;,&#xd;
        &quot;payment&quot;: &quot;90.00&quot;,&#xd;
        &quot;refund&quot;: null,&#xd;
        &quot;deposit&quot;: &quot;90.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;Cheque&quot;,&#xd;
        &quot;payment&quot;: null,&#xd;
        &quot;refund&quot;: &quot;10.00&quot;,&#xd;
        &quot;deposit&quot;: &quot;90.00&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;paymentMethod&quot;: &quot;totalAmount&quot;,&#xd;
        &quot;payment&quot;: &quot;90.00&quot;,&#xd;
        &quot;refund&quot;: &quot;10.00&quot;,&#xd;
        &quot;deposit&quot;: &quot;80.00&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;summaryPermits&quot;: [&#xd;
      {&#xd;
        &quot;permitType&quot;: &quot;STOS&quot;,&#xd;
        &quot;permitCount&quot;: &quot;1&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;permitType&quot;: &quot;TROS&quot;,&#xd;
        &quot;permitCount&quot;: &quot;1&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;permitType&quot;: &quot;totalPermitCount&quot;,&#xd;
        &quot;permitCount&quot;: &quot;2&quot;&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;generatedDocumentFileName&quot;: &quot;Financial-A-2-3-4-5&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BEARER_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ppcDgenTemplateRender">
          <stringProp name="HTTPSampler.path">https://${DOPS_API_URL}/dgen/template/render</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;templateName&quot;: &quot;PERMIT&quot;,&#xd;
  &quot;templateVersion&quot;: 1,&#xd;
  &quot;templateData&quot;: {&#xd;
    &quot;permitName&quot;: &quot;Oversize: Term&quot;,&#xd;
    &quot;permitNumber&quot;: &quot;P9-00010001-354&quot;,&#xd;
    &quot;permitType&quot;: &quot;TROS&quot;,&#xd;
    &quot;createdDateTime&quot;: &quot;Jul. 7, 2023, 08:26 am&quot;,&#xd;
    &quot;updatedDateTime&quot;: &quot;Jul. 7, 2023, 08:26 am&quot;,&#xd;
    &quot;companyName&quot;: &quot;Parisian LLC Trucking&quot;,&#xd;
    &quot;clientNumber&quot;: &quot;B3-000005-722&quot;,&#xd;
    &quot;revisions&quot;: [&#xd;
      {&#xd;
        &quot;timeStamp&quot;: &quot;&quot;,&#xd;
        &quot;description&quot;: &quot;N/A&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;permitData&quot;: {&#xd;
      &quot;startDate&quot;: &quot;Jun. 5, 2023&quot;,&#xd;
      &quot;expiryDate&quot;: &quot;Jul. 4, 2023&quot;,&#xd;
      &quot;permitDuration&quot;: 30,&#xd;
      &quot;feeSummary&quot;: &quot;30&quot;,&#xd;
      &quot;commodities&quot;: [&#xd;
        {&#xd;
          &quot;description&quot;: &quot;General Permit Conditions&quot;,&#xd;
          &quot;condition&quot;: &quot;CVSE-1000&quot;,&#xd;
          &quot;conditionLink&quot;: &quot;https://www.th.gov.bc.ca/forms/getForm.aspx?formId=1251&quot;,&#xd;
          &quot;checked&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;description&quot;: &quot;Permit Scope and Limitation&quot;,&#xd;
          &quot;condition&quot;: &quot;CVSE-1070&quot;,&#xd;
          &quot;conditionLink&quot;: &quot;https://www.th.gov.bc.ca/forms/getForm.aspx?formId=1261&quot;,&#xd;
          &quot;checked&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;description&quot;: &quot;Log Permit Conditions&quot;,&#xd;
          &quot;condition&quot;: &quot;CVSE-1000L&quot;,&#xd;
          &quot;conditionLink&quot;: &quot;https://www.th.gov.bc.ca/forms/getForm.aspx?formId=1250&quot;,&#xd;
          &quot;checked&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;contactDetails&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Lewis&quot;,&#xd;
        &quot;lastName&quot;: &quot;Hamilton&quot;,&#xd;
        &quot;phone1&quot;: &quot;(778) 952-1234&quot;,&#xd;
        &quot;email&quot;: &quot;lewis@f1.com&quot;,&#xd;
        &quot;phone1Extension&quot;: &quot;1&quot;,&#xd;
        &quot;phone2&quot;: null,&#xd;
        &quot;phone2Extension&quot;: null,&#xd;
        &quot;fax&quot;: null&#xd;
      },&#xd;
      &quot;mailingAddress&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;123 Short Street&quot;,&#xd;
        &quot;addressLine2&quot;: null,&#xd;
        &quot;city&quot;: &quot;Victoria&quot;,&#xd;
        &quot;provinceCode&quot;: &quot;British Columbia&quot;,&#xd;
        &quot;countryCode&quot;: &quot;Canada&quot;,&#xd;
        &quot;postalCode&quot;: &quot;V8X2V5&quot;&#xd;
      },&#xd;
      &quot;vehicleDetails&quot;: {&#xd;
        &quot;vin&quot;: &quot;781452&quot;,&#xd;
        &quot;plate&quot;: &quot;PRJZZP&quot;,&#xd;
        &quot;make&quot;: &quot;GMC&quot;,&#xd;
        &quot;year&quot;: 2001,&#xd;
        &quot;countryCode&quot;: &quot;Canada&quot;,&#xd;
        &quot;provinceCode&quot;: &quot;British Columbia&quot;,&#xd;
        &quot;vehicleType&quot;: &quot;Power Unit&quot;,&#xd;
        &quot;vehicleSubType&quot;: &quot;Logging Trucks&quot;,&#xd;
        &quot;saveVehicle&quot;: true&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;generatedDocumentFileName&quot;: &quot;permit-A-2-3-4-5&quot;,&#xd;
  &quot;documentsToMerge&quot;: [&#xd;
    &quot;CVSE-1000&quot;&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BEARER_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${RESULTS_DIR}/dops.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
