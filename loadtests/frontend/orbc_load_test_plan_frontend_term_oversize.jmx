<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">3180</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NUM_THREADS" elementType="Argument">
            <stringProp name="Argument.name">NUM_THREADS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FRONTEND_URL" elementType="Argument">
            <stringProp name="Argument.name">FRONTEND_URL</stringProp>
            <stringProp name="Argument.value">https://onroutebc-test-frontend.apps.silver.devops.gov.bc.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULTS_DIR" elementType="Argument">
            <stringProp name="Argument.name">RESULTS_DIR</stringProp>
            <stringProp name="Argument.value">~/results</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER" elementType="Argument">
            <stringProp name="Argument.name">USER</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NEW_APPLICATION_URL" elementType="Argument">
            <stringProp name="Argument.name">NEW_APPLICATION_URL</stringProp>
            <stringProp name="Argument.value">https://onroutebc-test-frontend.apps.silver.devops.gov.bc.ca/create-application/TROS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
        <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
        <stringProp name="WebDriverConfig.driver_path">C:\Users\brwang\Software\chromedriver-win64\chromedriver-win64-129\chromedriver.exe</stringProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <boolProp name="WebDriverConfig.headless">false</boolProp>
        <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
        <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
        <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
        <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
      </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="createNewApplication" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.WebElement

WDS.sampleResult.sampleStart() 
def frontendUrl = WDS.vars.get(&quot;FRONTEND_URL&quot;)
WDS.browser.get(frontendUrl);
Thread.sleep(5000)


def loginButton = WDS.browser.findElement(By.id(&apos;login-bceid&apos;))
if (loginButton != null) {
    loginButton.click()
    WDS.log.info(&quot;Clicked on the login-bceid button&quot;)
} else {
    WDS.log.info(&quot;Button with id &apos;login-bceid&apos; not found&quot;)
}

Thread.sleep(10000)
def user = WDS.browser.findElement(By.id(&apos;user&apos;))
def password = WDS.browser.findElement(By.id(&apos;password&apos;))

def userValue = WDS.vars.get(&quot;USER&quot;)
def passwordValue = WDS.vars.get(&quot;PASSWORD&quot;)
user.sendKeys(userValue)
password.sendKeys(passwordValue)
Thread.sleep(5000)

def submitButton = WDS.browser.findElement(By.name(&apos;btnSubmit&apos;))
if (submitButton != null) {
    submitButton.click()
} else {
    WDS.log.info(&apos;Submit button with name=&quot;btnSubmit&quot; not found&apos;)
}
Thread.sleep(10000)

// start a new application
def newApplicationUrl = WDS.vars.get(&quot;NEW_APPLICATION_URL&quot;)
WDS.browser.get(newApplicationUrl);
Thread.sleep(5000)

def selectedVehicle = WDS.browser.findElement(By.id(&apos;application-select-vehicle&apos;))
selectedVehicle.sendKeys(&quot;MCL36&quot;)
Thread.sleep(5000)
def vin = WDS.browser.findElement(By.cssSelector(&apos;[name=&quot;permitData.vehicleDetails.vin&quot;]&apos;))
vin.sendKeys(&quot;MCL36A&quot;)
Thread.sleep(5000)
def plate = WDS.browser.findElement(By.cssSelector(&apos;[name=&quot;permitData.vehicleDetails.plate&quot;]&apos;))
plate.sendKeys(&quot;L4NDO&quot;)
Thread.sleep(5000)
def make = WDS.browser.findElement(By.cssSelector(&apos;[name=&quot;permitData.vehicleDetails.make&quot;]&apos;))
make.sendKeys(&quot;BMW&quot;)
Thread.sleep(5000)
def year = WDS.browser.findElement(By.cssSelector(&apos;[name=&quot;permitData.vehicleDetails.year&quot;]&apos;))
year.sendKeys(&quot;2020&quot;)
Thread.sleep(5000)
def country = WDS.browser.findElement(By.id(&apos;mui-component-select-permitData.vehicleDetails.countryCode&apos;))
WDS.browser.executeScript(&quot;window.scrollTo(0, arguments[0].getBoundingClientRect().top + window.pageYOffset - 100);&quot;, country)
country.click()
Thread.sleep(5000)
def ca = WDS.browser.findElement(By.cssSelector(&apos;[data-value=&quot;CA&quot;]&apos;))
ca.click()
Thread.sleep(5000)
def province = WDS.browser.findElement(By.id(&apos;mui-component-select-permitData.vehicleDetails.provinceCode&apos;))
province.click()
Thread.sleep(5000)
def bc = WDS.browser.findElement(By.cssSelector(&apos;[data-value=&quot;BC&quot;]&apos;))
bc.click()
Thread.sleep(5000)
def vehicleType = WDS.browser.findElement(By.id(&apos;mui-component-select-permitData.vehicleDetails.vehicleType&apos;))
vehicleType.click()
def powerUnit = WDS.browser.findElement(By.cssSelector(&apos;[data-value=&quot;powerUnit&quot;]&apos;))
powerUnit.click()
Thread.sleep(5000)


Thread.sleep(5000)
def vehicleSubType = WDS.browser.findElement(By.id(&apos;mui-component-select-permitData.vehicleDetails.vehicleSubType&apos;))
vehicleSubType.click()
def trucks = WDS.browser.findElement(By.cssSelector(&apos;[data-value=&quot;REGTRCK&quot;]&apos;))
trucks.click()
Thread.sleep(5000)

def continueButton = WDS.browser.findElement(By.cssSelector(&apos;[data-testid=&quot;continue-application-button&quot;]&apos;))
Thread.sleep(5000)

if (continueButton != null) {
    continueButton.click()
    WDS.log.info(&apos;Clicked the button with data-testid=&quot;continue-application-button&quot;&apos;)
} else {
    WDS.log.info(&apos;Button with data-testid=&quot;continue-application-button&quot; not found&apos;)
}

Thread.sleep(10000)
def checkboxes = WDS.browser.findElements(By.cssSelector(&apos;input[type=&quot;checkbox&quot;]&apos;))
checkboxes.each { checkbox -&gt;
    WDS.browser.executeScript(&quot;window.scrollTo(0, arguments[0].getBoundingClientRect().top + window.pageYOffset - 100);&quot;, checkbox)
    if (!checkbox.isSelected()) {
        checkbox.click()
    }
}

Thread.sleep(5000)
def addToCart = WDS.browser.findElement(By.cssSelector(&apos;[data-testid=&quot;add-to-cart-btn&quot;]&apos;))
addToCart.click()

Thread.sleep(10000)
def shoppingCart = WDS.browser.findElement(By.className(&apos;shopping-cart-button&apos;))
shoppingCart.click()

Thread.sleep(5000)
def payNow = WDS.browser.findElement(By.cssSelector(&apos;[data-testid=&quot;pay-now-btn&quot;]&apos;))
WDS.browser.executeScript(&quot;window.scrollTo(0, arguments[0].getBoundingClientRect().top + window.pageYOffset - 100);&quot;, payNow)
payNow.click()

Thread.sleep(5000)

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${RESULTS_DIR}/frontend.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
