name: Merge to Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/*"
      - "**.md"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy:
    name: Security Scan
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.10.0
        with:
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          scan-type: "fs"
          scanners: "vuln,secret,config"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
  deploys-test:
    name: TEST Deployments
    needs:
      - codeql
      - trivy
    environment: test
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        name: [init, backend/vehicles, frontend]
        include:
          - name: backend/vehicles
            file: backend/vehicles/openshift.deploy.yml
            overwrite: true
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.developer.gov.bc.ca
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: "false"
          namespace: platform-services
          secrets: |
            ${{secrets.VAULT_ENV}}/data/database-test   DATABASE_HOST             | VAULT_DATABASE_HOST;
            ${{secrets.VAULT_ENV}}/data/database-test   DATABASE_USER             | VAULT_DATABASE_USER;
            ${{secrets.VAULT_ENV}}/data/database-test   DATABASE_NAME             | VAULT_DATABASE_NAME;
            ${{secrets.VAULT_ENV}}/data/database-test   DATABASE_PASSWORD         | VAULT_DATABASE_PASSWORD;
            ${{secrets.VAULT_ENV}}/data/database-test   DATABASE_PORT             | VAULT_DATABASE_PORT;
            ${{secrets.VAULT_ENV}}/data/auth0-test      AUTH0_ISSUER_URL          | VAULT_AUTH0_ISSUER_URL;
            ${{secrets.VAULT_ENV}}/data/auth0-test      AUTH0_AUDIENCE            | VAULT_AUTH0_AUDIENCE;
            ${{secrets.VAULT_ENV}}/data/auth0-test      AUTH0_IGNORE_EXP          | VAULT_AUTH0_IGNORE_EXP;
            ${{secrets.VAULT_ENV}}/data/coms-test       BASICAUTH_PASSWORD        | VAULT_BASICAUTH_PASSWORD;
            ${{secrets.VAULT_ENV}}/data/coms-test       BASICAUTH_USERNAME        | VAULT_BASICAUTH_USERNAME;
            ${{secrets.VAULT_ENV}}/data/coms-test       COMS_URL                  | VAULT_COMS_URL;
            ${{secrets.VAULT_ENV}}/data/coms-test       COMS_PRESIGNED_URL_EXPIRY | VAULT_PRESIGNED_URL_EXPIRY;
            ${{env.VAULT_ENV}}/data/ches-test           CHES_CLIENT_ID            | VAULT_CHES_CLIENT_ID;
            ${{env.VAULT_ENV}}/data/ches-test           CHES_CLIENT_SECRET        | VAULT_CHES_CLIENT_SECRET;
      
      - uses: bcgov-nr/action-deployer-openshift@v1.0.4
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ secrets.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters: 
            -p ZONE=test
            -p NAME=${{ github.event.repository.name }} ${{ matrix.parameters }}
            -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:test
            -p DATABASE_NAME=${{steps.secrets.outputs.VAULT_DATABASE_NAME}}
            -p DATABASE_USER=${{steps.secrets.outputs.VAULT_DATABASE_USER}}
            -p DATABASE_PASSWORD=${{steps.secrets.outputs.VAULT_DATABASE_PASSWORD}}
            -p DATABASE_HOST=${{steps.secrets.outputs.VAULT_DATABASE_HOST}}
            -p AUTH0_ISSUER_URL=${{steps.secrets.outputs.VAULT_AUTH0_ISSUER_URL}}
            -p AUTH0_AUDIENCE=${{steps.secrets.outputs.VAULT_AUTH0_AUDIENCE}}
            -p AUTH0_IGNORE_EXP=${{steps.secrets.outputs.VAULT_AUTH0_IGNORE_EXP}}
            -p BASICAUTH_PASSWORD=${{steps.secrets.outputs.VAULT_BASICAUTH_PASSWORD}}
            -p BASICAUTH_USERNAME=${{steps.secrets.outputs.VAULT_BASICAUTH_USERNAME}}
            -p COMS_URL=${{steps.secrets.outputs.VAULT_COMS_URL}}
            -p COMS_PRESIGNED_URL_EXPIRY=${{steps.secrets.outputs.VAULT_PRESIGNED_URL_EXPIRY}}
            -p CHES_CLIENT_ID=${{steps.secrets.outputs.VAULT_CHES_CLIENT_ID}}
            -p CHES_CLIENT_SECRET=${{steps.secrets.outputs.VAULT_CHES_CLIENT_SECRET}}
            ${{ matrix.parameters }}
          penetration_test: false
  
  helm-deploys-test:
    name: Test Deployments - HELM
    needs:
      - deploys-test
    runs-on: ubuntu-22.04
    environment: test
    strategy:
      max-parallel: 1
      fail-fast: true
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
            url: https://vault.developer.gov.bc.ca
            token: ${{ secrets.VAULT_TOKEN }}
            exportEnv: 'false'
            namespace: platform-services
            secrets: |
                ${{secrets.VAULT_ENV}}/data/coms-test  BASICAUTH_PASSWORD              | VAULT_BASICAUTH_PASSWORD;
                ${{secrets.VAULT_ENV}}/data/coms-test  BASICAUTH_USERNAME              | VAULT_BASICAUTH_USERNAME;
                ${{secrets.VAULT_ENV}}/data/coms-test  OBJECTSTORAGE_ACCESSKEYID       | VAULT_OBJECTSTORAGE_ACCESSKEYID;
                ${{secrets.VAULT_ENV}}/data/coms-test  OBJECTSTORAGE_BUCKET            | VAULT_OBJECTSTORAGE_BUCKET;
                ${{secrets.VAULT_ENV}}/data/coms-test  OBJECTSTORAGE_ENDPOINT          | VAULT_OBJECTSTORAGE_ENDPOINT;
                ${{secrets.VAULT_ENV}}/data/coms-test  OBJECTSTORAGE_KEY               | VAULT_OBJECTSTORAGE_KEY;
                ${{secrets.VAULT_ENV}}/data/coms-test  OBJECTSTORAGE_SECRETACCESSKEY   | VAULT_OBJECTSTORAGE_SECRETACCESSKEY;
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          namespace: ${{ secrets.OC_NAMESPACE }}
      - name: Helm Deploy
        uses: vimeda/helm@v1.7.0
        with:
          chart: 'common-object-management-service/common-object-management-service'
          chart-version: 0.0.13
          namespace: ${{ secrets.OC_NAMESPACE }}
          release: ${{ github.event.repository.name }}-test-common-object-management-service
          repo: https://bcgov.github.io/common-object-management-service
          repo-alias: common-object-management-service
          token: ${{secrets.OC_TOKEN}}
          values: |
            fullNameOverride: ${{ github.event.repository.name }}-test-common-object-management-service
            route:
              host: ${{ github.event.repository.name }}-test-common-object-management-service.apps.silver.devops.gov.bc.ca
            basicAuthSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_BASICAUTH_USERNAME}}
            objectStorageSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ACCESSKEYID}}
              password: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_SECRETACCESSKEY}}
            features:
              oidcAuth: false
            config:
              enabled: true
              releaseScoped: true
              configMap:
                KC_IDENTITYKEY: null
                KC_PUBLICKEY: null
                KC_REALM: null
                KC_SERVERURL: null
                OBJECTSTORAGE_BUCKET: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_BUCKET}}
                OBJECTSTORAGE_ENDPOINT: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ENDPOINT}}
                OBJECTSTORAGE_KEY: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_KEY}}
  
  image-promotion-staging:
    name: Promote images to staging (pre-release)
    needs:
      - deploys-test
      - helm-deploys-test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        component: [backend/vehicles, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: test
          tags: staging

  deploys-staging:
    name: Staging Deployments
    needs:
      - image-promotion-staging
    environment: staging
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        name: [init, backend/vehicles, frontend]
        include:
          - name: backend/vehicles
            file: backend/vehicles/openshift.deploy.yml
            overwrite: true
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.developer.gov.bc.ca
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: "false"
          namespace: platform-services
          secrets: |
            ${{secrets.VAULT_ENV}}/data/database-staging    DATABASE_HOST       | VAULT_DATABASE_HOST;
            ${{secrets.VAULT_ENV}}/data/database-staging    DATABASE_USER       | VAULT_DATABASE_USER;
            ${{secrets.VAULT_ENV}}/data/database-staging    DATABASE_NAME       | VAULT_DATABASE_NAME;
            ${{secrets.VAULT_ENV}}/data/database-staging    DATABASE_PASSWORD   | VAULT_DATABASE_PASSWORD;
            ${{secrets.VAULT_ENV}}/data/database-staging    DATABASE_PORT       | VAULT_DATABASE_PORT;
            ${{secrets.VAULT_ENV}}/data/auth0-staging       AUTH0_ISSUER_URL    | VAULT_AUTH0_ISSUER_URL;
            ${{secrets.VAULT_ENV}}/data/auth0-staging       AUTH0_AUDIENCE      | VAULT_AUTH0_AUDIENCE;
            ${{secrets.VAULT_ENV}}/data/auth0-staging       AUTH0_IGNORE_EXP    | VAULT_AUTH0_IGNORE_EXP
      
      - uses: bcgov-nr/action-deployer-openshift@v1.0.4
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ secrets.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters: 
            -p ZONE=staging
            -p NAME=${{ github.event.repository.name }}
            -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:staging
            -p DATABASE_NAME=${{steps.secrets.outputs.VAULT_DATABASE_NAME}}
            -p DATABASE_USER=${{steps.secrets.outputs.VAULT_DATABASE_USER}}
            -p DATABASE_PASSWORD='${{steps.secrets.outputs.VAULT_DATABASE_PASSWORD}}'
            -p DATABASE_HOST=${{steps.secrets.outputs.VAULT_DATABASE_HOST}}
            -p AUTH0_ISSUER_URL=${{steps.secrets.outputs.VAULT_AUTH0_ISSUER_URL}}
            -p AUTH0_AUDIENCE=${{steps.secrets.outputs.VAULT_AUTH0_AUDIENCE}}
            -p AUTH0_IGNORE_EXP=${{steps.secrets.outputs.VAULT_AUTH0_IGNORE_EXP}}
            ${{ matrix.parameters }}
          penetration_test: true
  
  helm-deploys-staging:
    name: Staging Deployments - HELM
    needs:
      - deploys-staging
    runs-on: ubuntu-22.04
    environment: staging
    strategy:
      max-parallel: 1
      fail-fast: true
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
            url: https://vault.developer.gov.bc.ca
            token: ${{ secrets.VAULT_TOKEN }}
            exportEnv: 'false'
            namespace: platform-services
            secrets: |
                ${{secrets.VAULT_ENV}}/data/coms-staging  BASICAUTH_PASSWORD              | VAULT_BASICAUTH_PASSWORD;
                ${{secrets.VAULT_ENV}}/data/coms-staging  BASICAUTH_USERNAME              | VAULT_BASICAUTH_USERNAME;
                ${{secrets.VAULT_ENV}}/data/coms-staging  OBJECTSTORAGE_ACCESSKEYID       | VAULT_OBJECTSTORAGE_ACCESSKEYID;
                ${{secrets.VAULT_ENV}}/data/coms-staging  OBJECTSTORAGE_BUCKET            | VAULT_OBJECTSTORAGE_BUCKET;
                ${{secrets.VAULT_ENV}}/data/coms-staging  OBJECTSTORAGE_ENDPOINT          | VAULT_OBJECTSTORAGE_ENDPOINT;
                ${{secrets.VAULT_ENV}}/data/coms-staging  OBJECTSTORAGE_KEY               | VAULT_OBJECTSTORAGE_KEY;
                ${{secrets.VAULT_ENV}}/data/coms-staging  OBJECTSTORAGE_SECRETACCESSKEY   | VAULT_OBJECTSTORAGE_SECRETACCESSKEY;
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          namespace: ${{ secrets.OC_NAMESPACE }}
      - name: Helm Deploy
        uses: vimeda/helm@v1.7.0
        with:
          chart: 'common-object-management-service/common-object-management-service'
          chart-version: 0.0.13
          namespace: ${{ secrets.OC_NAMESPACE }}
          release: ${{ github.event.repository.name }}-staging-common-object-management-service
          repo: https://bcgov.github.io/common-object-management-service
          repo-alias: common-object-management-service
          token: ${{secrets.OC_TOKEN}}
          values: |
            fullNameOverride: ${{ github.event.repository.name }}-staging-common-object-management-service
            route:
              host: ${{ github.event.repository.name }}-staging-common-object-management-service.apps.silver.devops.gov.bc.ca
            basicAuthSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_BASICAUTH_USERNAME}}
            objectStorageSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ACCESSKEYID}}
              password: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_SECRETACCESSKEY}}
            features:
              oidcAuth: false
            config:
              enabled: true
              releaseScoped: true
              configMap:
                KC_IDENTITYKEY: null
                KC_PUBLICKEY: null
                KC_REALM: null
                KC_SERVERURL: null
                OBJECTSTORAGE_BUCKET: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_BUCKET}}
                OBJECTSTORAGE_ENDPOINT: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ENDPOINT}}
                OBJECTSTORAGE_KEY: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_KEY}}
  
  image-promotion-uat:
    name: Promote images to UAT
    needs:
      - helm-deploys-staging
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        component: [backend/vehicles, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: staging
          tags: uat

  deploys-uat:
    name: UAT Deployments
    needs:
      - image-promotion-uat
    environment: uat
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        name: [init, backend/vehicles, frontend]
        include:
          - name: backend/vehicles
            file: backend/vehicles/openshift.deploy.yml
            overwrite: true
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.developer.gov.bc.ca
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: "false"
          namespace: platform-services
          secrets: |
            ${{secrets.VAULT_ENV}}/data/database-uat    DATABASE_HOST     | VAULT_DATABASE_HOST;
            ${{secrets.VAULT_ENV}}/data/database-uat    DATABASE_USER     | VAULT_DATABASE_USER;
            ${{secrets.VAULT_ENV}}/data/database-uat    DATABASE_NAME     | VAULT_DATABASE_NAME;
            ${{secrets.VAULT_ENV}}/data/database-uat    DATABASE_PASSWORD | VAULT_DATABASE_PASSWORD;
            ${{secrets.VAULT_ENV}}/data/database-uat    DATABASE_PORT     | VAULT_DATABASE_PORT;
            ${{secrets.VAULT_ENV}}/data/auth0-uat      AUTH0_ISSUER_URL   | VAULT_AUTH0_ISSUER_URL;
            ${{secrets.VAULT_ENV}}/data/auth0-uat      AUTH0_AUDIENCE     | VAULT_AUTH0_AUDIENCE;
            ${{secrets.VAULT_ENV}}/data/auth0-uat      AUTH0_IGNORE_EXP   | VAULT_AUTH0_IGNORE_EXP
      
      - uses: bcgov-nr/action-deployer-openshift@v1.0.4
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ secrets.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters: 
            -p ZONE=uat
            -p NAME=${{ github.event.repository.name }}
            -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:uat
            -p DATABASE_NAME=${{steps.secrets.outputs.VAULT_DATABASE_NAME}}
            -p DATABASE_USER=${{steps.secrets.outputs.VAULT_DATABASE_USER}}
            -p DATABASE_PASSWORD=${{steps.secrets.outputs.VAULT_DATABASE_PASSWORD}}
            -p DATABASE_HOST=${{steps.secrets.outputs.VAULT_DATABASE_HOST}}
            -p AUTH0_ISSUER_URL=${{steps.secrets.outputs.VAULT_AUTH0_ISSUER_URL}}
            -p AUTH0_AUDIENCE=${{steps.secrets.outputs.VAULT_AUTH0_AUDIENCE}}
            -p AUTH0_IGNORE_EXP=${{steps.secrets.outputs.VAULT_AUTH0_IGNORE_EXP}}
            ${{ matrix.parameters }}
          penetration_test: true
  
  helm-deploys-uat:
    name: UAT Deployments - HELM
    needs:
      - deploys-uat
    runs-on: ubuntu-22.04
    environment: uat
    strategy:
      max-parallel: 1
      fail-fast: true
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
            url: https://vault.developer.gov.bc.ca
            token: ${{ secrets.VAULT_TOKEN }}
            exportEnv: 'false'
            namespace: platform-services
            secrets: |
                ${{secrets.VAULT_ENV}}/data/coms-uat  BASICAUTH_PASSWORD              | VAULT_BASICAUTH_PASSWORD;
                ${{secrets.VAULT_ENV}}/data/coms-uat  BASICAUTH_USERNAME              | VAULT_BASICAUTH_USERNAME;
                ${{secrets.VAULT_ENV}}/data/coms-uat  OBJECTSTORAGE_ACCESSKEYID       | VAULT_OBJECTSTORAGE_ACCESSKEYID;
                ${{secrets.VAULT_ENV}}/data/coms-uat  OBJECTSTORAGE_BUCKET            | VAULT_OBJECTSTORAGE_BUCKET;
                ${{secrets.VAULT_ENV}}/data/coms-uat  OBJECTSTORAGE_ENDPOINT          | VAULT_OBJECTSTORAGE_ENDPOINT;
                ${{secrets.VAULT_ENV}}/data/coms-uat  OBJECTSTORAGE_KEY               | VAULT_OBJECTSTORAGE_KEY;
                ${{secrets.VAULT_ENV}}/data/coms-uat  OBJECTSTORAGE_SECRETACCESSKEY   | VAULT_OBJECTSTORAGE_SECRETACCESSKEY;
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          namespace: ${{ secrets.OC_NAMESPACE }}
      - name: Helm Deploy
        uses: vimeda/helm@v1.7.0
        with:
          chart: 'common-object-management-service/common-object-management-service'
          chart-version: 0.0.13
          namespace: ${{ secrets.OC_NAMESPACE }}
          release: ${{ github.event.repository.name }}-uat-common-object-management-service
          repo: https://bcgov.github.io/common-object-management-service
          repo-alias: common-object-management-service
          token: ${{secrets.OC_TOKEN}}
          values: |
            fullNameOverride: ${{ github.event.repository.name }}-uat-common-object-management-service
            route:
              host: ${{ github.event.repository.name }}-uat-common-object-management-service.apps.silver.devops.gov.bc.ca
            basicAuthSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_BASICAUTH_USERNAME}}
            objectStorageSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ACCESSKEYID}}
              password: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_SECRETACCESSKEY}}
            features:
              oidcAuth: false
            config:
              enabled: true
              releaseScoped: true
              configMap:
                KC_IDENTITYKEY: null
                KC_PUBLICKEY: null
                KC_REALM: null
                KC_SERVERURL: null
                OBJECTSTORAGE_BUCKET: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_BUCKET}}
                OBJECTSTORAGE_ENDPOINT: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ENDPOINT}}
                OBJECTSTORAGE_KEY: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_KEY}}
  
  GitVersion:
    name: Mainline Versioning - GitVersion
    needs:
      - deploys-uat
      - helm-deploys-uat
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }} # checkout the correct branch name
          fetch-depth: 0 # fetch the whole repo history

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Determine SemVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: GitVersion.yaml

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer}}

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs:
      - deploys-uat
      - GitVersion
    steps:
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.GitVersion.outputs.fullSemVer }}
          release_name: Release ${{ needs.GitVersion.outputs.fullSemVer }}
          draft: false
          prerelease: false
  
  image-promotion-release:
    name: Tag images with Release Version
    needs:
      - GitVersion
      - release
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        component: [backend/vehicles, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: uat
          tags: ${{ needs.GitVersion.outputs.fullSemVer }}
  
  image-promotion-prod:
    name: Promote images to PROD
    needs:
      - deploys-uat
      - image-promotion-release
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        component: [backend/vehicles, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: uat
          tags: prod

  deploys-prod:
    name: PROD Deployments
    needs:
      - image-promotion-prod
    environment: prod
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        name: [init, backend/vehicles, frontend]
        include:
          - name: backend/vehicles
            file: backend/vehicles/openshift.deploy.yml
            overwrite: true
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.developer.gov.bc.ca
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: "false"
          namespace: platform-services
          secrets: |
            ${{secrets.VAULT_ENV}}/data/database-prod  DATABASE_HOST     | VAULT_DATABASE_HOST;
            ${{secrets.VAULT_ENV}}/data/database-prod  DATABASE_USER     | VAULT_DATABASE_USER;
            ${{secrets.VAULT_ENV}}/data/database-prod  DATABASE_NAME     | VAULT_DATABASE_NAME;
            ${{secrets.VAULT_ENV}}/data/database-prod  DATABASE_PASSWORD | VAULT_DATABASE_PASSWORD;
            ${{secrets.VAULT_ENV}}/data/database-prod  DATABASE_PORT     | VAULT_DATABASE_PORT;
            ${{secrets.VAULT_ENV}}/data/auth0-prod     AUTH0_ISSUER_URL  | VAULT_AUTH0_ISSUER_URL;
            ${{secrets.VAULT_ENV}}/data/auth0-prod     AUTH0_AUDIENCE    | VAULT_AUTH0_AUDIENCE;
            ${{secrets.VAULT_ENV}}/data/auth0-prod     AUTH0_IGNORE_EXP  | VAULT_AUTH0_IGNORE_EXP
      - uses: bcgov-nr/action-deployer-openshift@v1.0.4
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ secrets.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters: 
            -p ZONE=prod
            -p NAME=${{ github.event.repository.name }}
            -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:prod
            -p DATABASE_NAME=${{steps.secrets.outputs.VAULT_DATABASE_NAME}}
            -p DATABASE_USER=${{steps.secrets.outputs.VAULT_DATABASE_USER}}
            -p DATABASE_PASSWORD=${{steps.secrets.outputs.VAULT_DATABASE_PASSWORD}}
            -p DATABASE_HOST=${{steps.secrets.outputs.VAULT_DATABASE_HOST}}
            -p AUTH0_ISSUER_URL=${{steps.secrets.outputs.VAULT_AUTH0_ISSUER_URL}}
            -p AUTH0_AUDIENCE=${{steps.secrets.outputs.VAULT_AUTH0_AUDIENCE}}
            -p AUTH0_IGNORE_EXP=${{steps.secrets.outputs.VAULT_AUTH0_IGNORE_EXP}}
            ${{ matrix.parameters }}
          penetration_test: false
  
  helm-deploys-prod:
    name: UAT Deployments - HELM
    needs:
      - deploys-prod
    runs-on: ubuntu-22.04
    environment: prod
    strategy:
      max-parallel: 1
      fail-fast: true
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
            url: https://vault.developer.gov.bc.ca
            token: ${{ secrets.VAULT_TOKEN }}
            exportEnv: 'false'
            namespace: platform-services
            secrets: |
                ${{secrets.VAULT_ENV}}/data/coms-prod  BASICAUTH_PASSWORD              | VAULT_BASICAUTH_PASSWORD;
                ${{secrets.VAULT_ENV}}/data/coms-prod  BASICAUTH_USERNAME              | VAULT_BASICAUTH_USERNAME;
                ${{secrets.VAULT_ENV}}/data/coms-prod  OBJECTSTORAGE_ACCESSKEYID       | VAULT_OBJECTSTORAGE_ACCESSKEYID;
                ${{secrets.VAULT_ENV}}/data/coms-prod  OBJECTSTORAGE_BUCKET            | VAULT_OBJECTSTORAGE_BUCKET;
                ${{secrets.VAULT_ENV}}/data/coms-prod  OBJECTSTORAGE_ENDPOINT          | VAULT_OBJECTSTORAGE_ENDPOINT;
                ${{secrets.VAULT_ENV}}/data/coms-prod  OBJECTSTORAGE_KEY               | VAULT_OBJECTSTORAGE_KEY;
                ${{secrets.VAULT_ENV}}/data/coms-prod  OBJECTSTORAGE_SECRETACCESSKEY   | VAULT_OBJECTSTORAGE_SECRETACCESSKEY;
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          namespace: ${{ secrets.OC_NAMESPACE }}
      - name: Helm Deploy
        uses: vimeda/helm@v1.7.0
        with:
          chart: 'common-object-management-service/common-object-management-service'
          chart-version: 0.0.13
          namespace: ${{ secrets.OC_NAMESPACE }}
          release: ${{ github.event.repository.name }}-prod-common-object-management-service
          repo: https://bcgov.github.io/common-object-management-service
          repo-alias: common-object-management-service
          token: ${{secrets.OC_TOKEN}}
          values: |
            fullNameOverride: ${{ github.event.repository.name }}-prod-common-object-management-service
            route:
              host: ${{ github.event.repository.name }}-prod-common-object-management-service.apps.silver.devops.gov.bc.ca
            basicAuthSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_BASICAUTH_USERNAME}}
            objectStorageSecretOverride:
              username: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ACCESSKEYID}}
              password: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_SECRETACCESSKEY}}
            features:
              oidcAuth: false
            config:
              enabled: true
              releaseScoped: true
              configMap:
                KC_IDENTITYKEY: null
                KC_PUBLICKEY: null
                KC_REALM: null
                KC_SERVERURL: null
                OBJECTSTORAGE_BUCKET: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_BUCKET}}
                OBJECTSTORAGE_ENDPOINT: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_ENDPOINT}}
                OBJECTSTORAGE_KEY: ${{steps.secrets.outputs.VAULT_OBJECTSTORAGE_KEY}}
