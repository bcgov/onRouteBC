name: Merge to Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/*"
      - "**.md"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy:
    name: Security Scan
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.8.0
        with:
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          scan-type: "fs"
          security-checks: "vuln,secret,config"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  deploys-test:
    name: TEST Deployments
    needs:
      - codeql
      - trivy
    environment: test
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        name: [init, backend/vehicles, frontend]
        include:
          - name: backend/vehicles
            file: backend/vehicles/openshift.deploy.yml
            overwrite: true
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
    steps:
      - name: Get Vault Environment
        shell: bash
        run: echo VAULT_ENV=${{secrets.OC_NAMESPACE}} | awk -F '-' '{print($2!="prod")?$1"-nonprod":$1"-prod"}' | tee $GITHUB_ENV
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.developer.gov.bc.ca
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: 'false'
          namespace: platform-services
          secrets: |
            ${{env.VAULT_ENV}}/data/database-test  DATABASE_HOST     | VAULT_DATABASE_HOST;
            ${{env.VAULT_ENV}}/data/database-test  DATABASE_USER     | VAULT_DATABASE_USER;
            ${{env.VAULT_ENV}}/data/database-test  DATABASE_NAME     | VAULT_DATABASE_NAME;
            ${{env.VAULT_ENV}}/data/database-test  DATABASE_PASSWORD | VAULT_DATABASE_PASSWORD;
            ${{env.VAULT_ENV}}/data/database-test  DATABASE_PORT     | VAULT_DATABASE_PORT
      - uses: bcgov-nr/action-deployer-openshift@v1.0.1
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ secrets.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters:
            -p ZONE=test
            -p NAME=${{ github.event.repository.name }} ${{ matrix.parameters }}
            -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:test
            -p DATABASE_NAME=${{steps.secrets.outputs.VAULT_DATABASE_NAME}}
            -p DATABASE_USER=${{steps.secrets.outputs.VAULT_DATABASE_USER}}
            -p DATABASE_PASSWORD=${{steps.secrets.outputs.VAULT_DATABASE_PASSWORD}}
            -p DATABASE_HOST=${{steps.secrets.outputs.VAULT_DATABASE_HOST}}
            ${{ matrix.parameters }}
          penetration_test: true

  deploys-prod:
    name: PROD Deployments
    needs:
      - deploys-test
    environment: prod
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        name: [init, backend/vehicles, frontend]
        include:
          - name: backend/vehicles
            file: backend/vehicles/openshift.deploy.yml
            overwrite: true
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
    steps:
      - name: Get Vault Environment
        shell: bash
        run: echo VAULT_ENV=${{secrets.OC_NAMESPACE}} | awk -F '-' '{print($2!="prod")?$1"-nonprod":$1"-prod"}' | tee $GITHUB_ENV
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.developer.gov.bc.ca
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: 'false'
          namespace: platform-services
          secrets: |
            ${{env.VAULT_ENV}}/data/database-prod  DATABASE_HOST     | VAULT_DATABASE_HOST;
            ${{env.VAULT_ENV}}/data/database-prod  DATABASE_USER     | VAULT_DATABASE_USER;
            ${{env.VAULT_ENV}}/data/database-prod  DATABASE_NAME     | VAULT_DATABASE_NAME;
            ${{env.VAULT_ENV}}/data/database-prod  DATABASE_PASSWORD | VAULT_DATABASE_PASSWORD;
            ${{env.VAULT_ENV}}/data/database-prod  DATABASE_PORT     | VAULT_DATABASE_PORT
      - uses: bcgov-nr/action-deployer-openshift@v1.0.1
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ secrets.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters:
            -p ZONE=prod
            -p NAME=${{ github.event.repository.name }} ${{ matrix.parameters }}
            -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:test
            -p DATABASE_NAME=${{steps.secrets.outputs.VAULT_DATABASE_NAME}}
            -p DATABASE_USER=${{steps.secrets.outputs.VAULT_DATABASE_USER}}
            -p DATABASE_PASSWORD=${{steps.secrets.outputs.VAULT_DATABASE_PASSWORD}}
            -p DATABASE_HOST=${{steps.secrets.outputs.VAULT_DATABASE_HOST}}
            ${{ matrix.parameters }}
          penetration_test: false

  image-promotions:
    name: Promote images to PROD
    needs:
      - deploys-prod
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        component: [backend/vehicles, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: test
          tags: prod
  
  GitVersion:
    name: Mainline Versioning - GitVersion
    needs: 
      - deploys-prod
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine SemVersion
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
          configFilePath: GitVersion.yaml

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer}}
          
  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: 
      - GitVersion
    steps:
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.GitVersion.outputs.fullSemVer }}
          release_name: Release ${{ needs.GitVersion.outputs.fullSemVer }}
          draft: false
          prerelease: false
