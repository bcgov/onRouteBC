---
version: "3.8"

services:
  sql-server-db:
    container_name: sql-server-db
    build:
      context: ./database/mssql
      dockerfile: Dockerfile
    environment:
      MSSQL_HOST: sql-server-db
      MSSQL_PORT: ${MSSQL_PORT}
      MSSQL_DB: ${MSSQL_DB}
      MSSQL_SA_USER: ${MSSQL_SA_USER}
      # Ensure there are no dollar sign ($) characters in the password.
      # Due to the nature of the docker-mssql and how we are loading the
      # schema with bash and variable substitution any passwords with
      # $ will not work and the database will not start.
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_ENCRYPT: ${MSSQL_ENCRYPT}
      MSSQL_RUN_TESTS: ${MSSQL_RUN_TESTS}
      MSSQL_LOAD_SAMPLE_DATA: ${MSSQL_LOAD_SAMPLE_DATA}
      MSSQL_MOTI_HOST: ${MSSQL_MOTI_HOST}
      MSSQL_MOTI_DB: ${MSSQL_MOTI_DB}
      MSSQL_MOTI_USER: ${MSSQL_MOTI_USER}
      # See note about dollar signs in passwords, above.
      MSSQL_MOTI_PASSWORD: ${MSSQL_MOTI_PASSWORD}
      SCRIPT_DIR: /usr/config
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S $$MSSQL_HOST -U $$MSSQL_SA_USER -P $$MSSQL_SA_PASSWORD -Q "USE $$MSSQL_DB" | grep "Changed database context to '$$MSSQL_DB'"
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
    hostname: sql-server-db
    ports:
      - "1433:1433"
    volumes:
      - /sql_data

  vehicles-api:
    container_name: vehicles-api
    build:
      context: ./backend/vehicles/
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      DB_TYPE: ${DB_TYPE}
      MSSQL_HOST: sql-server-db
      MSSQL_PORT: ${MSSQL_PORT}
      MSSQL_DB: ${MSSQL_DB}
      MSSQL_SA_USER: ${MSSQL_SA_USER}
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_ENCRYPT: ${MSSQL_ENCRYPT}
      AUTH0_ISSUER_URL: ${AUTH0_ISSUER_URL}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_IGNORE_EXP: ${AUTH0_IGNORE_EXP}
      BASICAUTH_USERNAME: ${BASICAUTH_USERNAME}
      BASICAUTH_PASSWORD: ${BASICAUTH_PASSWORD}
      COMS_URL: ${COMS_URL}
      COMS_SERVICE: ${COMS_SERVICE}
      COMS_BUCKET_ID: ${COMS_BUCKET_ID}
      COMS_PRESIGNED_URL_EXPIRY: ${COMS_PRESIGNED_URL_EXPIRY}
      CDOGS_CLIENT_ID: ${CDOGS_CLIENT_ID}
      CDOGS_CLIENT_SECRET: ${CDOGS_CLIENT_SECRET}
      CDOGS_TOKEN_URL: ${CDOGS_TOKEN_URL}
      CDOGS_URL: ${CDOGS_URL}
      CHES_TOKEN_URL: ${CHES_TOKEN_URL}
      CHES_CLIENT_ID: ${CHES_CLIENT_ID}
      CHES_CLIENT_SECRET: ${CHES_CLIENT_SECRET}
      CHES_URL: ${CHES_URL}
      DOPS_URL: "http://dops-api:5001"
      FRONT_END_URL: "http://frontend:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      sql-server-db:
        condition: service_healthy
    hostname: vehicles-api
    links:
      - sql-server-db
      - dops-api
    ports:
      - "5000:5000"

  dops-api:
    container_name: dops-api
    build:
      context: ./backend/dops/
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      DB_TYPE: ${DB_TYPE}
      MSSQL_HOST: sql-server-db
      MSSQL_PORT: ${MSSQL_PORT}
      MSSQL_DB: ${MSSQL_DB}
      MSSQL_SA_USER: ${MSSQL_SA_USER}
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_ENCRYPT: ${MSSQL_ENCRYPT}
      AUTH0_ISSUER_URL: ${AUTH0_ISSUER_URL}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_IGNORE_EXP: ${AUTH0_IGNORE_EXP}
      BASICAUTH_USERNAME: ${BASICAUTH_USERNAME}
      BASICAUTH_PASSWORD: ${BASICAUTH_PASSWORD}
      COMS_URL: ${COMS_URL}
      COMS_SERVICE: ${COMS_SERVICE}
      COMS_BUCKET_ID: ${COMS_BUCKET_ID}
      COMS_PRESIGNED_URL_EXPIRY: ${COMS_PRESIGNED_URL_EXPIRY}      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      sql-server-db:
        condition: service_healthy
    hostname: dops-api
    links:
      - sql-server-db
    ports:
      - "5001:5001"

  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
      args:
        VITE_DEPLOY_ENVIRONMENT: ${VITE_DEPLOY_ENVIRONMENT}
        VITE_API_VEHICLE_URL: ${VITE_API_VEHICLE_URL}
        VITE_AUTH0_ISSUER_URL: ${VITE_AUTH0_ISSUER_URL}
        VITE_AUTH0_AUDIENCE: ${VITE_AUTH0_AUDIENCE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    hostname: frontend
    links:
      - vehicles-api
      - dops-api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:z
      - /app/node_modules
