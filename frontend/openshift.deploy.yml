apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: onroutebc
  - name: COMPONENT
    description: Component name
    value: frontend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "25m"
  - name: MEMORY_REQUEST
    value: "50Mi"
  - name: CPU_LIMIT
    value: "75m"
  - name: MEMORY_LIMIT
    value: "150Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/onroutebc:prod-frontend
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    data:
      web.properties: |
        window.VITE_DEPLOY_ENVIRONMENT=${ZONE}
      generate-config.sh: |
        #!/bin/bash
        echo "generate-config.sh"
        # Recreate config file
        rm -rf ./config.js
        touch ./config.js
        # Add assignment 
        echo "window._env_ = {" >> ./config.js
        # Read each line in .env file
        # Each line represents key=value pairs
        while read -r line || [[ -n "$line" ]];
        do
          # Split env variables by character `=`
          if printf '%s\n' "$line" | grep -q -e '='; then
            varname=$(printf '%s\n' "$line" | sed -e 's/=.*//')
            varvalue=$(printf '%s\n' "$line" | sed -e 's/^[^=]*=//')
          fi

          # Read value of current variable if exists as Environment variable
          value=$(printf '%s\n' "${!varname}")
          # Otherwise use value from .env file
          [[ -z $value ]] && value=${varvalue}
          
          # Append configuration property to JS file
          echo "  $varname: \"$value\"," >> ./config.js
        done < .env
        echo "}" >> ./config.js
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: BACKEND_URL
                  value: https://${NAME}-${ZONE}-backend.${DOMAIN}
                - name: VITE_DEPLOY_ENVIRONMENT
                  configMap:
                    name: web-config
                    items:
                      - key: "web.properties"
                        path: "config.js"
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 5
              lifecycle:
                postStart:
                  exec:
                    command:
                    - /bin/sh
                    - -c
                    - |
                      echo "scripts in /generate-config"
                      ls -lh /generate-config
                      echo "copy scripts to /tmp"
                      cp /generate-config/*.sh /tmp
                      echo "apply 'chmod +x' to /tmp/*.sh"
                      chmod +x /tmp/*.sh
                      echo "execute generate-config.sh now"
                      /tmp/generate-config.sh
              volumeMounts:
                #override config.js file
                - name: config
                  mountPath: "/usr/share/nginx/html/config.js"
                  subPath: "config.js"
                  readOnly: false
                - name: tmpfs
                  mountPath: /usr/share/nginx/html/configs
                  readOnly: false
                - mountPath: /${NAME}-${ZONE}-${COMPONENT}
                  name: generate-config-volume
          volumes:
            - name: config
              configMap:
                name: ${NAME}-${ZONE}-${COMPONENT}
                items:
                  - key: "web.properties"
                    path: "config.js"
            - name: tmpfs
              emptyDir: {}
            - name: generate-config-volume
              configMap:
                name: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: ${NAME}-${ZONE}-${COMPONENT}
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100
