SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON
GO

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

INSERT [permit].[ORBC_CFS_FILE_STATUS_TYPE] ([CFS_FILE_STATUS_TYPE], [NAME], [DESCRIPTION], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP]) VALUES (N'PROCESSING', N'Processing', N'Creating and sending file to sftp.', N'dbo', GETUTCDATE(), N'dbo', GETUTCDATE())
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] ADD  [REPROCESS_FLAG] [char](1) NULL
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL_HIST] ADD  [REPROCESS_FLAG] [char](1) NULL
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] WITH CHECK ADD  CONSTRAINT DK_ORBC_CFS_TRANSACTION_DETAIL_REPROCESS_FLAG_VAL CHECK ([REPROCESS_FLAG] IN ('Y','N'));
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] CHECK CONSTRAINT DK_ORBC_CFS_TRANSACTION_DETAIL_REPROCESS_FLAG_VAL
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] ADD CONSTRAINT [DK_ORBC_CFS_TRANSACTION_DETAIL_REPROCESS_FLAG] DEFAULT('N') FOR [REPROCESS_FLAG]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TRIGGER [permit].[ORBC_CFSTRDT_A_S_IUD_TR] ON [permit].[ORBC_CFS_TRANSACTION_DETAIL] FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update [permit].[ORBC_CFS_TRANSACTION_DETAIL_HIST] set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into [permit].[ORBC_CFS_TRANSACTION_DETAIL_HIST] ([ID], [TRANSACTION_ID], [FILE_NAME], [CFS_FILE_STATUS_TYPE], [ERROR_MESSAGE], [PROCESSSING_DATE_TIME], [REPROCESS_FLAG], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], _CFS_TRANSACTION_DETAIL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [TRANSACTION_ID], [FILE_NAME], [CFS_FILE_STATUS_TYPE], [ERROR_MESSAGE], [PROCESSSING_DATE_TIME], [REPROCESS_FLAG], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], (next value for [permit].[ORBC_CFS_TRANSACTION_DETAIL_H_ID_SEQ]) as [_CFS_TRANSACTION_DETAIL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC orbc_error_handling
END CATCH;
go

IF @@ERROR <> 0 SET NOEXEC ON
GO

DECLARE @VersionDescription VARCHAR(255)
SET @VersionDescription = 'DB changes for CGI File and GL Code'

INSERT [dbo].[ORBC_SYS_VERSION] ([VERSION_ID], [DESCRIPTION], [UPDATE_SCRIPT], [REVERT_SCRIPT], [RELEASE_DATE]) VALUES (48, @VersionDescription, '$(UPDATE_SCRIPT)', '$(REVERT_SCRIPT)', getutcdate())
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO

