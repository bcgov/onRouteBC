SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON
GO

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

CREATE TABLE [permit].[ORBC_GL_TYPE](	
	[GL_TYPE] [char] (6) NOT NULL,
	[NAME] [varchar] (20) NOT NULL,
	[DESCRIPTION] [varchar] (50) NULL,
	[APP_CREATE_TIMESTAMP] [datetime2](7) DEFAULT (getutcdate()),
	[APP_CREATE_USERID] [nvarchar](30) DEFAULT (user_name()),
	[APP_CREATE_USER_GUID] [char](32) NULL,
	[APP_CREATE_USER_DIRECTORY] [nvarchar](30) DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP] [datetime2](7) DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID] [nvarchar](30) DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID] [char](32) NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] [nvarchar](30) DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER] [int] NULL,
	[DB_CREATE_USERID] [varchar](63) NULL,
	[DB_CREATE_TIMESTAMP] [datetime2](7) NULL,
	[DB_LAST_UPDATE_USERID] [varchar](63) NULL,
	[DB_LAST_UPDATE_TIMESTAMP] [datetime2](7) NULL,
 CONSTRAINT [ORBC_GL_TYPE_PK] PRIMARY KEY CLUSTERED 
(
	[GL_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE TABLE [permit].[ORBC_GL_CODE_TYPE](	
	[GL_CODE_TYPE] [int] IDENTITY(1,1) NOT NULL,
	[GL_TYPE] [char] (6) NULL,
   [PERMIT_TYPE] [varchar](10) NULL,
	[PAYMENT_METHOD_TYPE] [varchar] (15) NULL,
	[PAYMENT_CARD_TYPE] [varchar] (5) NULL,
	[CLIENT] [char] (3) NOT NULL,
	[RESPONSIBILITY] [char] (5) NOT NULL,
	[SERVICE_LINE] [char] (5) NOT NULL,
	[STOB] [char] (4) NOT NULL,
	[PROJECT] [char] (7) NOT NULL,
	[LOCATION] [char] (6) NOT NULL,
	[FUTURE] [char] (4) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER] [int] NULL,
	[DB_CREATE_USERID] [varchar](63) NULL,
	[DB_CREATE_TIMESTAMP] [datetime2](7) NULL,
	[DB_LAST_UPDATE_USERID] [varchar](63) NULL,
	[DB_LAST_UPDATE_TIMESTAMP] [datetime2](7) NULL,
 CONSTRAINT [ORBC_GL_CODE_TYPE_PK] PRIMARY KEY CLUSTERED 
(
	[GL_CODE_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] ADD  [REPROCESS_FLAG] [char](1) NULL
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL_HIST] ADD  [REPROCESS_FLAG] [char](1) NULL
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] WITH CHECK ADD  CONSTRAINT DK_ORBC_CFS_TRANSACTION_DETAIL_REPROCESS_FLAG_VAL CHECK ([REPROCESS_FLAG] IN ('Y','N'));
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] CHECK CONSTRAINT DK_ORBC_CFS_TRANSACTION_DETAIL_REPROCESS_FLAG_VAL
GO
ALTER TABLE [permit].[ORBC_CFS_TRANSACTION_DETAIL] ADD CONSTRAINT [DK_ORBC_CFS_TRANSACTION_DETAIL_REPROCESS_FLAG] DEFAULT('N') FOR [REPROCESS_FLAG]

GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE]  WITH CHECK ADD CONSTRAINT [FK_ORBC_GL_CODE_TYPE_GL_TYPE] FOREIGN KEY([GL_TYPE]) REFERENCES [permit].[ORBC_GL_TYPE] ([GL_TYPE])
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE] CHECK CONSTRAINT [FK_ORBC_GL_CODE_TYPE_GL_TYPE]
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ORBC_GL_CODE_TYPE_PERMIT_TYPE] FOREIGN KEY([PERMIT_TYPE])
REFERENCES [permit].[ORBC_PERMIT_TYPE] ([PERMIT_TYPE])
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE] CHECK CONSTRAINT [FK_ORBC_GL_CODE_TYPE_PERMIT_TYPE]
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE]  WITH CHECK ADD CONSTRAINT [FK_ORBC_GL_CODE_TYPE_PAYMENT_METHOD_TYPE] FOREIGN KEY([PAYMENT_METHOD_TYPE]) REFERENCES [permit].[ORBC_PAYMENT_METHOD_TYPE] ([PAYMENT_METHOD_TYPE])
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE] CHECK CONSTRAINT [FK_ORBC_GL_CODE_TYPE_PAYMENT_METHOD_TYPE]
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE]  WITH CHECK ADD CONSTRAINT [FK_ORBC_GL_CODE_TYPE_PAYMENT_CARD_TYPE] FOREIGN KEY([PAYMENT_CARD_TYPE]) REFERENCES [permit].[ORBC_PAYMENT_CARD_TYPE] ([PAYMENT_CARD_TYPE])
GO
ALTER TABLE [permit].[ORBC_GL_CODE_TYPE] CHECK CONSTRAINT [FK_ORBC_GL_CODE_TYPE_PAYMENT_CARD_TYPE]
GO
ALTER TRIGGER [permit].[ORBC_CFSTRDT_A_S_IUD_TR] ON [permit].[ORBC_CFS_TRANSACTION_DETAIL] FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update [permit].[ORBC_CFS_TRANSACTION_DETAIL_HIST] set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into [permit].[ORBC_CFS_TRANSACTION_DETAIL_HIST] ([ID], [TRANSACTION_ID], [FILE_NAME], [CFS_FILE_STATUS_TYPE], [ERROR_MESSAGE], [PROCESSSING_DATE_TIME], [REPROCESS_FLAG], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], _CFS_TRANSACTION_DETAIL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [TRANSACTION_ID], [FILE_NAME], [CFS_FILE_STATUS_TYPE], [ERROR_MESSAGE], [PROCESSSING_DATE_TIME], [REPROCESS_FLAG], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], (next value for [permit].[ORBC_CFS_TRANSACTION_DETAIL_H_ID_SEQ]) as [_CFS_TRANSACTION_DETAIL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC orbc_error_handling
END CATCH;
go

IF @@ERROR <> 0 SET NOEXEC ON
GO

DECLARE @VersionDescription VARCHAR(255)
SET @VersionDescription = 'DB changes for CGI File and GL Code'

INSERT [dbo].[ORBC_SYS_VERSION] ([VERSION_ID], [DESCRIPTION], [UPDATE_SCRIPT], [REVERT_SCRIPT], [RELEASE_DATE]) VALUES (46, @VersionDescription, '$(UPDATE_SCRIPT)', '$(REVERT_SCRIPT)', getutcdate())
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO

