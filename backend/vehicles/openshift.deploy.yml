apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: onroutebc
  - name: COMPONENT
    description: Component name
    value: backend-vehicles
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "25m"
  - name: MEMORY_REQUEST
    value: "50Mi"
  - name: CPU_LIMIT
    value: "75m"
  - name: MEMORY_LIMIT
    value: "150Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/onroutebc:prod-backend-vehicles
  - name: LICENSE_PLATE
    description: The BC GOV LICENSE_PLATE for this project
    required: true
  - name: VAULT_ENVIRONMENT
    description: The Vault environment for this project
    required: true
  - name: VAULT_ZONE
    description: Using Dev/Test/etc.. within vault
    required: true

objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    data:
      database-type: mssql
      database-encrypt: "false"
      database-port: "1433"
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          annotations:
            # 1. Vault injector configuration goes here, inside the template.
            vault.hashicorp.com/agent-inject: 'true'
            vault.hashicorp.com/agent-inject-token: 'true'
            vault.hashicorp.com/agent-pre-populate-only: 'true' # this makes sure the secret vault will only change during pod restart
            vault.hashicorp.com/auth-path: auth/k8s-silver  # This was tricky.  Be sure to use k8s-silver, k8s-gold, or k8s-golddr
            vault.hashicorp.com/namespace: platform-services
            vault.hashicorp.com/role: ${VAULT_ENVIRONMENT}  # licenseplate-nonprod or licenseplate-prod are your options

            # Configure how to retrieve and populate the secrets from Vault:
            # - The name of the secret is any unique string after vault.hashicorp.com/agent-inject-secret-<name>
            # - The value is the path in Vault where the secret is located.
            vault.hashicorp.com/agent-inject-secret-auth0-dev:    ${VAULT_ENVIRONMENT}/auth0-${VAULT_ZONE}
            #vault.hashicorp.com/agent-inject-template-auth0-dev:  |
            #{{- with secret "${VAULT_ENVIRONMENT}/auth0-dev" }}
            #export AUTH0_ISSUER_URL="{{ .Data.data.AUTH0_ISSUER_URL }}"
            #export AUTH0_AUDIANCE="{{ .Data.data.AUTH0_AUDIENCE }}"
            #export AUTH0_IGNORE_EXP="{{ .Data.data.AUTH0_IGNORE_EXP }}"
            #{{- end }}
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          serviceAccountName: ${LICENSE_PLATE}-vault
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              args:
                ['sh', '-c', 'source /vault/secrets/auth0-${VAULT_ZONE}']

              env:
                - name: DB_TYPE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-type
                - name: MSSQL_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-port
                - name: MSSQL_ENCRYPT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-encrypt
              ports:
                - containerPort: 5000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                httpGet:
                  path: /
                  port: 5000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 15
                timeoutSeconds: 5
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 5000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 5000-tcp
          protocol: TCP
          port: 80
          targetPort: 5000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 5000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: ${NAME}-${ZONE}-${COMPONENT}
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100
